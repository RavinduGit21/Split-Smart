package com.splitsmart.feature.events

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Divider
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import java.text.NumberFormat
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

@Composable
fun InvoiceComposable(state: EventDetailState, currency: NumberFormat) {
	val event = state.event ?: return
	val dateFmt = SimpleDateFormat("MMM d, yyyy", Locale.getDefault())
	Column(
		modifier = Modifier
			.background(Color.White)
			.padding(20.dp),
		verticalArrangement = Arrangement.spacedBy(12.dp)
	) {
		// Header
		Text("Split Smart", style = MaterialTheme.typography.titleLarge, fontWeight = FontWeight.Black, color = Color(0xFF111111))
		Text("Event Invoice", style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.SemiBold, color = Color(0xFF111111))
		Divider(color = Color(0xFFEEEEEE))

		// Event info
		Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {
			Text(event.name, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.Bold, color = Color(0xFF111111))
			Row(horizontalArrangement = Arrangement.spacedBy(12.dp)) {
				Text(dateFmt.format(Date(event.dateMillis)), color = Color(0xFF333333))
				if (event.location.isNotBlank()) Text(event.location, color = Color(0xFF333333))
			}
			if (event.description.isNotBlank()) Text(event.description, color = Color(0xFF555555))
		}

		Spacer(Modifier.height(4.dp))

		// Items
		if (state.items.isNotEmpty()) {
			Text("Items", fontWeight = FontWeight.SemiBold, color = Color(0xFF111111))
			state.items.forEach { item ->
				Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween, verticalAlignment = Alignment.CenterVertically) {
					Text(item.name, color = Color(0xFF222222))
					Text(currency.format(item.amountCents / 100.0), color = Color(0xFF111111), fontWeight = FontWeight.Medium)
				}
			}
			Divider(color = Color(0xFFEEEEEE))
		}

		// Participants
		if (state.participants.isNotEmpty()) {
			Text("Participants", fontWeight = FontWeight.SemiBold, color = Color(0xFF111111))
			state.participants.forEach { p ->
				Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
					Column {
						Text(p.name, color = Color(0xFF222222), fontWeight = FontWeight.Medium)
						Text("Share: ${currency.format(p.shareAmountCents / 100.0)}", color = Color(0xFF666666))
					}
					Text("Paid: ${currency.format(p.paidAmountCents / 100.0)}", color = Color(0xFF111111), fontWeight = FontWeight.Medium)
				}
			}
			Divider(color = Color(0xFFEEEEEE))
		}

		// Totals
		Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
			Text("Total Budget", fontWeight = FontWeight.SemiBold, color = Color(0xFF111111))
			Text(currency.format(event.totalAmountCents / 100.0), fontWeight = FontWeight.Bold, color = Color(0xFF111111))
		}
		Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
			Text("Gathered", color = Color(0xFF111111))
			Text(currency.format(state.totalPaidCents / 100.0), fontWeight = FontWeight.Medium, color = Color(0xFF2E7D32))
		}
		Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
			Text("Remaining", color = Color(0xFF111111))
			val remaining = (event.totalAmountCents - state.totalPaidCents).coerceAtLeast(0)
			Text(currency.format(remaining / 100.0), fontWeight = FontWeight.Medium, color = Color(0xFFB00020))
		}

		Spacer(Modifier.height(8.dp))
		Text("Generated by Split Smart", color = Color(0xFF888888))
	}
}


